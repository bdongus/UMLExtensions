
#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Wenn der Code neu generiert wird, gehen alle Änderungen an dieser Datei verloren
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Data.Common;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using Telerik.OpenAccess.Metadata.Relational;
using Package1;

namespace Package1 {
	public partial class EntitiesModelFluentMetadataSource : FluentMetadataSource {
		protected override IList<MappingConfiguration> PrepareMapping() {
			List<MappingConfiguration> mappingConfigurations = new List<MappingConfiguration>();
			MappingConfiguration<Header> headerConfiguration = this.GetHeaderMappingConfiguration();
			mappingConfigurations.Add(headerConfiguration);
			MappingConfiguration<Position> positionConfiguration = this.GetPositionMappingConfiguration();
			mappingConfigurations.Add(positionConfiguration);
			return mappingConfigurations;
		}
		protected override void SetContainerSettings(MetadataContainer container) {
			container.Name = "EntitiesModel";
			container.DefaultNamespace = "Package1";
			container.NameGenerator.RemoveLeadingUnderscores = false;
			container.NameGenerator.SourceStrategy = Telerik.OpenAccess.Metadata.NamingSourceStrategy.Property;
			container.NameGenerator.RemoveCamelCase = false;
		}
		public MappingConfiguration<Header> GetHeaderMappingConfiguration() {
			MappingConfiguration<Header> configuration = this.GetHeaderClassConfiguration();
			this.PrepareHeaderPropertyConfigurations(configuration);
			this.PrepareHeaderAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<Header> GetHeaderClassConfiguration() {
			MappingConfiguration<Header> configuration = new MappingConfiguration<Header>();
			configuration.MapType(x => new { }).WithDataAccessKind(DataAccessKind.Default);
			
			return configuration;
		}
			
		public void PrepareHeaderPropertyConfigurations(MappingConfiguration<Header> configuration) {
			configuration.HasProperty(x => x.Id);
			configuration.HasProperty(x => x.Title);
			configuration.HasProperty(x => x.IsChecked);
			configuration.HasProperty(x => x.Status);
			configuration.HasProperty(x => x.DateCreated);
			configuration.HasProperty(x => x.DateModified);
		}
			
		public void PrepareHeaderAssociationConfigurations(MappingConfiguration<Header> configuration) {
			configuration.HasAssociation(x => x.Positions).WithOpposite(x => x.Header).HasConstraint((m, d)=>d.HeaderId == m.Id).IsManaged().IsDependent();
		}
				
		public MappingConfiguration<Position> GetPositionMappingConfiguration() {
			MappingConfiguration<Position> configuration = this.GetPositionClassConfiguration();
			this.PreparePositionPropertyConfigurations(configuration);
			this.PreparePositionAssociationConfigurations(configuration);

			return configuration;
		}

		public MappingConfiguration<Position> GetPositionClassConfiguration() {
			MappingConfiguration<Position> configuration = new MappingConfiguration<Position>();
			configuration.MapType(x => new { }).WithDataAccessKind(DataAccessKind.Default);
			
			return configuration;
		}
			
		public void PreparePositionPropertyConfigurations(MappingConfiguration<Position> configuration) {
			configuration.HasProperty(x => x.Id).IsIdentity(KeyGenerator.Autoinc);
			configuration.HasProperty(x => x.HeaderId);
			configuration.HasProperty(x => x.Description);
			configuration.HasProperty(x => x.SequenceNumber);
			configuration.HasProperty(x => x.DateCreated);
			configuration.HasProperty(x => x.DateModified);
		}
			
		public void PreparePositionAssociationConfigurations(MappingConfiguration<Position> configuration) {
			configuration.HasAssociation(x => x.Header).WithOpposite(x => x.Positions).HasConstraint((d, m)=>d.HeaderId == m.Id).IsManaged();
		}
				
	}
}
#pragma warning restore 1591
