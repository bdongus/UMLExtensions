
#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Wenn der Code neu generiert wird, gehen alle Änderungen an dieser Datei verloren
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Package1;

namespace Package1 {
	public partial class EntitiesModel : OpenAccessContext {
		private static string connectionStringName = @"EntitiesModelConnection";
		
		private static BackendConfiguration backend = GetBackendConfiguration();
						
		private static MetadataContainer metadataSource = new EntitiesModelFluentMetadataSource().GetModel();
		
		public EntitiesModel() : base(connectionStringName, backend, metadataSource) { }
		
		public EntitiesModel(string connection) : base(connection, backend, metadataSource) { }
		
		public EntitiesModel(BackendConfiguration backendConfiguration) : base(connectionStringName, backendConfiguration, metadataSource) { }
		
		public EntitiesModel(string connection, MetadataSource metadataSource) : base(connection, backend, metadataSource) { }
		
		public EntitiesModel(string connection, BackendConfiguration backendConfiguration, MetadataSource metadataSource) : base(connection, backendConfiguration, metadataSource) { }
		public IQueryable<Header> Headers  {
			get {
				return this.GetAll<Header>();
			}
		}
		public IQueryable<Position> Positions  {
			get {
				return this.GetAll<Position>();
			}
		}
		
		public static BackendConfiguration GetBackendConfiguration() {
			BackendConfiguration backend = new BackendConfiguration();
			backend.Backend = "MsSql";
			backend.ProviderName = "System.Data.SqlClient";
			backend.Logging.LogEventsToTrace = false;
			backend.Logging.MetricStoreSnapshotInterval = 0;
			
			CustomizeBackendConfiguration(ref backend);
			
			return backend;
		}
		public void UpdateSchema() {
		   var handler = this.GetSchemaHandler();
		   string script = null;
		   try {
		       script = handler.CreateUpdateDDLScript( null );
		   }
		   catch {
		       bool throwException = false;
		       try {
		           handler.CreateDatabase();
		           script = handler.CreateDDLScript();
		       }
		       catch {
		           throwException = true;
		       }
		       if ( throwException ) throw;
		   }
		   if ( string.IsNullOrEmpty( script ) == false ) {
		       handler.ExecuteDDLScript( script );
		   }
		}
		/// <summary>
		/// Allows you to customize the BackendConfiguration of DispatcherEntities.
		/// </summary>
		/// <param name="config">The BackendConfiguration of DispatcherEntities.</param>
		static partial void CustomizeBackendConfiguration(ref BackendConfiguration config);
	}
}
