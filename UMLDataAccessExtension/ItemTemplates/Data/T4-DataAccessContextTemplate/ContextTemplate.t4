<#@ Include File="TemplateHeader.t4" #>
<#@ Modeling ElementType="Microsoft.VisualStudio.Uml.Classes.IPackage" Processor="ModelingProcessor" ApplyStereotypes="CSharp" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.AuxiliaryConstructs" #>
<#@ Import Namespace="Microsoft.VisualStudio.Uml.Classes" #>
<#@ import namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility" #>
<#@ import namespace="Microsoft.VisualStudio.ArchitectureTools.Extensibility.Uml" #>
<#@ Include File="CSharpCommentHelpers.t4" #>
<#@ Include File="CSharpHelpers.t4" #>
<#@ Output Extension=".generated.cs" #>
#pragma warning disable 1591
<# 
    WriteAutoGeneratedWarningHeader();
    string packageNamespace = this.Element.Name;
	string dbConnection = GetDataAccessProperty(this.Element, "persistentPackage", "ConnectionString");
	if (String.IsNullOrEmpty(dbConnection)) dbConnection = "EnititiesModelConnection";
	string className = GetDataAccessProperty(this.Element, "persistentPackage", "ContextClass");
	if (String.IsNullOrEmpty(className)) className="EntitiesModel";
#>
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
<#
if(!string.IsNullOrEmpty(packageNamespace)) {
#>
using <#= packageNamespace #>;

namespace <#= packageNamespace #> {
<#
    PushIndent("\t");
}
#>
public partial class <#= className #> : OpenAccessContext {
<# PushIndent("\t"); #>
private static string connectionStringName = @"<#= dbConnection #>";

private static BackendConfiguration backend = GetBackendConfiguration();
				
private static MetadataContainer metadataSource = new <#= className+"FluentMetadataSource" #>().GetModel();

public <#= className #>() : base(connectionStringName, backend, metadataSource) { }

public <#= className #>(string connection) : base(connection, backend, metadataSource) { }

public <#= className #>(BackendConfiguration backendConfiguration) : base(connectionStringName, backendConfiguration, metadataSource) { }

public <#= className #>(string connection, MetadataSource metadataSource) : base(connection, backend, metadataSource) { }

public <#= className #>(string connection, BackendConfiguration backendConfiguration, MetadataSource metadataSource) : base(connection, backendConfiguration, metadataSource) { }
<#
	IEnumerable<IClass> persistentTypes = this.Element.OwnedElements.OfType<IClass>();
	foreach(IClass persistentType in persistentTypes) {
		string typeName = persistentType.Name;
#>
public IQueryable<<#= typeName #>> <#= String.Concat(typeName, typeName.EndsWith("s") ? "es" : "s") #>  {
<# PushIndent("\t"); #>
get {
<# PushIndent("\t"); #>
return this.GetAll<<#= typeName #>>();
<# PopIndent(); #>
}
<# PopIndent(); #>
}
<#
	}
#>

public static BackendConfiguration GetBackendConfiguration() {
<# PushIndent("\t"); #>
BackendConfiguration backend = new BackendConfiguration();
backend.Backend = "MsSql";
backend.ProviderName = "System.Data.SqlClient";
backend.Logging.LogEventsToTrace = false;
backend.Logging.MetricStoreSnapshotInterval = 0;

CustomizeBackendConfiguration(ref backend);

return backend;
<# PopIndent(); #>
}
public void UpdateSchema() {
   var handler = this.GetSchemaHandler();
   string script = null;
   try {
       script = handler.CreateUpdateDDLScript( null );
   }
   catch {
       bool throwException = false;
       try {
           handler.CreateDatabase();
           script = handler.CreateDDLScript();
       }
       catch {
           throwException = true;
       }
       if ( throwException ) throw;
   }
   if ( string.IsNullOrEmpty( script ) == false ) {
       handler.ExecuteDDLScript( script );
   }
}
/// <summary>
/// Allows you to customize the BackendConfiguration.
/// </summary>
/// <param name="config">The BackendConfiguration of DispatcherEntities.</param>
static partial void CustomizeBackendConfiguration(ref BackendConfiguration config);
<# PopIndent(); #>
}
<# PopIndent(); #>
}
